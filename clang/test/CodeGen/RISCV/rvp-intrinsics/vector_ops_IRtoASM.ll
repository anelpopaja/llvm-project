; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-unknown-linux-gnu"


define dso_local i32 @vector_add8(i32 noundef %a.coerce, i32 noundef %b.coerce) local_unnamed_addr {
; CHECK-LABEL: vector_add8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    add8
; CHECK-NEXT:    ret
entry:
  %0 = bitcast i32 %a.coerce to <4 x i8>
  %1 = bitcast i32 %b.coerce to <4 x i8>
  %add = add <4 x i8> %1, %0
  %2 = bitcast <4 x i8> %add to i32
  ret i32 %2
}

define dso_local i32 @vector_sub8(i32 noundef %a.coerce, i32 noundef %b.coerce) local_unnamed_addr {
; CHECK-LABEL: vector_sub8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub8
; CHECK-NEXT:    ret
entry:
  %0 = bitcast i32 %a.coerce to <4 x i8>
  %1 = bitcast i32 %b.coerce to <4 x i8>
  %sub = sub <4 x i8> %0, %1
  %2 = bitcast <4 x i8> %sub to i32
  ret i32 %2
}

define dso_local i32 @vector_add16(i32 noundef %a.coerce, i32 noundef %b.coerce) local_unnamed_addr {
; CHECK-LABEL: vector_add16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    add16
; CHECK-NEXT:    ret
entry:
  %0 = bitcast i32 %a.coerce to <2 x i16>
  %1 = bitcast i32 %b.coerce to <2 x i16>
  %add = add <2 x i16> %1, %0
  %2 = bitcast <2 x i16> %add to i32
  ret i32 %2
}

define dso_local i32 @vector_sub16(i32 noundef %a.coerce, i32 noundef %b.coerce) local_unnamed_addr {
; CHECK-LABEL: vector_sub16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub16
; CHECK-NEXT:    ret
entry:
  %0 = bitcast i32 %a.coerce to <2 x i16>
  %1 = bitcast i32 %b.coerce to <2 x i16>
  %sub = sub <2 x i16> %0, %1
  %2 = bitcast <2 x i16> %sub to i32
  ret i32 %2
}
